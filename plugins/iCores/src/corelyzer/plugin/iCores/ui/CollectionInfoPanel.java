package corelyzer.plugin.iCores.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.sun.syndication.feed.synd.SyndEntry;
import corelyzer.data.CRPreferences;
import corelyzer.util.core.CoreModule;
import corelyzer.util.StringUtility;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import java.awt.*;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import java.awt.*;
import java.net.URL;
import java.util.List;

public class CollectionInfoPanel {
    private JPanel contentPane;
    private JEditorPane infoPane;
    private JLabel infoTitle;
    private JPanel tablePane;

    private FilterTablePanel entriesTablePane;

    public CollectionInfoPanel() {
        super();

        this.entriesTablePane = new FilterTablePanel();
        this.tablePane.add(entriesTablePane, BorderLayout.CENTER);

        // Selection actions
        JTable listTable = entriesTablePane.getTable();

        SelectionListener listener = new SelectionListener(listTable);
        listTable.getSelectionModel().addListSelectionListener(listener);
        listTable.getColumnModel().getSelectionModel().
                addListSelectionListener(listener);
    }

    public JPanel getContentPane() {
        return contentPane;
    }

    public FilterTablePanel getEntriesTablePane() {
        return entriesTablePane;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setContinuousLayout(true);
        splitPane1.setDividerLocation(160);
        splitPane1.setOrientation(0);
        contentPane.add(splitPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        splitPane1.setRightComponent(panel1);
        infoTitle = new JLabel();
        infoTitle.setBackground(new Color(-14664286));
        infoTitle.setDoubleBuffered(false);
        infoTitle.setEnabled(true);
        infoTitle.setForeground(new Color(-1));
        infoTitle.setHorizontalAlignment(0);
        infoTitle.setOpaque(true);
        infoTitle.setPreferredSize(new Dimension(108, 20));
        infoTitle.setText("Summary");
        panel1.add(infoTitle, BorderLayout.NORTH);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, BorderLayout.CENTER);
        infoPane = new JEditorPane();
        infoPane.setContentType("text/html");
        infoPane.setEditable(false);
        infoPane.setEnabled(true);
        scrollPane1.setViewportView(infoPane);
        tablePane = new JPanel();
        tablePane.setLayout(new BorderLayout(0, 0));
        splitPane1.setLeftComponent(tablePane);
        final JLabel label1 = new JLabel();
        label1.setBackground(new Color(-14664286));
        label1.setForeground(new Color(-1));
        label1.setHorizontalAlignment(0);
        label1.setOpaque(true);
        label1.setText("Core Listing");
        tablePane.add(label1, BorderLayout.NORTH);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    //--------------------------------------------------------------------------

    // Private SelectionListener class

    class SelectionListener implements ListSelectionListener {
        JTable table = null;

        SelectionListener(JTable table) {
            this.table = table;
        }

        public void valueChanged(ListSelectionEvent e) {
            if (table == null) return;

            int selectedRowIndex = -1;
            int selectedColumnIndex = -1;

            if (e.getSource() == table.getSelectionModel()
                    && table.getRowSelectionAllowed()) {
                selectedRowIndex = table.getSelectedRow();
            } else if (e.getSource() == table.getColumnModel().getSelectionModel()
                    && table.getColumnSelectionAllowed()) {
                selectedColumnIndex = table.getSelectedColumn();
            }

            if (e.getValueIsAdjusting()) {
                // The mouse button has not yet been released
            }

            // Update infoPane according to selectedIndex
            if (selectedRowIndex != -1) {
                // HTML Core image and PSICAT thumbnails,
                TableModel model = table.getModel();
                if (model.getRowCount() <= 0) return;

                String type = (String) model.getValueAt(selectedRowIndex, 1);
                String title = (String) model.getValueAt(selectedRowIndex, 2);
                String depth = (String) model.getValueAt(selectedRowIndex, 3);

                SyndEntry anEntry =
                        (SyndEntry) model.getValueAt(selectedRowIndex, 9);
                String summaryDescription = anEntry.getDescription().getValue();

                String coreThumbnailURLString =
                        (String) model.getValueAt(selectedRowIndex, 8);

                if (coreThumbnailURLString == null ||
                        coreThumbnailURLString.equals("")) {
                    coreThumbnailURLString = CRPreferences.defaultThumbnailURL;
                }

                String infoString = "<H1>Core Information Summary</H1><p>\n";
                infoString += "<b>"
                        + StringUtility.capitalizeHeadingCharacter(type) +
                        "</b> \"<i>" + title
                        + "</i>\" @ depth <u>" + depth + "</u> (m)eters." +
                        "<br><p>\n\n";

                infoString += "\n<table border=\"3\"><tr>" +
                        "<td bgcolor=\"#222222\"><font color=\"#FFCC00\">" +
                        "Description</font></td></tr>\n";

                infoString += "\n<tr><td>";
                infoString += "\n" + summaryDescription + "\n";
                infoString += "\n</td></tr></table>";

                infoString +=
                        "<br><p>\n<hr>\n<img src=\"" + coreThumbnailURLString +
                                "\">";

                infoString += "<br>\n<hr>\n" +
                        "<address>Generated with iCores@Corelyzer</address>\n";

                infoPane.setText(infoString);
            }

            if (selectedColumnIndex != -1) {
                System.out.println("---> [TODO] Column selection actions");
            }
        }
    }

}
