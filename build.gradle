allprojects {
	version = '1.4.0-SNAPSHOT'
	group = 'org.corewall'
	sourceCompatibility = '1.5'
	targetCompatibility = '1.5'
}

task 'package-check'(dependsOn: [':app:build']) << {
	def required = file("scenegraph/dist/scenegraph-${version}.jar")
	if (!required.exists()) {
		logger.error("!! Missing required scenegraph library or version mismatch.  Expected: scenegraph/dist/scenegraph-${version}.jar")
		logger.error("!! The library must be generated (or re-generated for this version) via 'gradle :scenegraph:build-jni'")
		logger.error("!! See scenegraph/README for instructions on how to setup the build environment")
		throw new Error("Missing required scenegraph library or version mismatch.  Expected: scenegraph/dist/scenegraph-${version}.jar")
	}
}

/**
 * Package things up as a Mac application bundle
 */
task 'package-mac'(dependsOn: 'package-check') << {
	def app = file('dist/mac/Corelyzer.app')
	ant.delete(dir: app, failonerror: false)
	mkdir(app)

	// copy the skeleton
	copy {
		into app
		from 'packages/mac'
	}

	// copy the jars and native libraries
	copy {
		into file('dist/mac/Corelyzer.app/Contents/Resources/Java')
		from 'app/dist'
		from file('app/deps/mac')
		from file('scenegraph/dist').listFiles().findAll { it.name.endsWith('.jar') || it.name.endsWith('.jnilib') }
	}

	// update our Info.plist
	def classpath = file('dist/mac/Corelyzer.app/Contents/Resources/Java').listFiles().findAll { it.name.endsWith('.jar') }.collect { file ->
		'\t\t\t<string>\\$JAVAROOT/' + file.name + '</string>'
	}
	def plist = file('dist/mac/Corelyzer.app/Contents/Info.plist')
	def text = plist.text.toString()
	text = text.replaceAll(':version', version) // add our version
	text = text.replaceAll(':classpath', classpath.join('\n'))
	plist.write(text)

	ant {
		// make our app executable
		chmod(file:"dist/mac/Corelyzer.app/Contents/MacOS/Corelyzer", perm:"ugo+rx")

		// make a tarball
		exec(executable: 'tar', dir: 'dist/mac') {
			arg(value: 'czvf')
			arg(value: "Corelyzer-${version}.tar.gz")
			arg(value: 'Corelyzer.app')
		}
	}
}

/**
 * Package things up as a Mac application bundle
 */
task 'package-mac-min'(dependsOn: 'package-check') << {
	def app = file('dist/mac/Corelyzer.app')
	if (app.exists()) {
		// copy the jars and native libraries
		copy {
			into file('dist/mac/Corelyzer.app/Contents/Resources/Java')
			from 'app/dist'
			from file('app/deps/mac')
			from file('scenegraph/dist').listFiles().findAll { it.name.endsWith('.jar') || it.name.endsWith('.jnilib') }
		}
	} else {
		mkdir(app)

		// copy the skeleton
		copy {
			into app
			from 'packages/mac'
		}

		// copy the jars and native libraries
		copy {
			into file('dist/mac/Corelyzer.app/Contents/Resources/Java')
			from 'app/dist'
			from file('app/deps/mac')
			from file('scenegraph/dist').listFiles().findAll { it.name.endsWith('.jar') || it.name.endsWith('.jnilib') }
		}

		// update our Info.plist
		def classpath = file('dist/mac/Corelyzer.app/Contents/Resources/Java').listFiles().findAll { it.name.endsWith('.jar') }.collect { file ->
			'\t\t\t<string>\\$JAVAROOT/' + file.name + '</string>'
		}
		def plist = file('dist/mac/Corelyzer.app/Contents/Info.plist')
		def text = plist.text.toString()
		text = text.replaceAll(':version', version) // add our version
		text = text.replaceAll(':classpath', classpath.join('\n'))
		plist.write(text)

		ant {
			// make our app executable
			chmod(file:"dist/mac/Corelyzer.app/Contents/MacOS/Corelyzer", perm:"ugo+rx")

			// make a tarball
			exec(executable: 'tar', dir: 'dist/mac') {
				arg(value: 'czvf')
				arg(value: "Corelyzer-${version}.tar.gz")
				arg(value: 'Corelyzer.app')
			}
		}
	}
}

task 'package-win'(dependsOn: 'package-check') << {
	def dist = file('dist/win')
	ant.delete(dir: dist, failonerror: false)
	mkdir(dist)

	// copy the skeleton
	copy {
		into dist
		from 'packages/win'
	}

	// copy the jars and native libraries
	copy {
		into dist
		from 'app/dist'
		from file('app/deps/win')
		from file('scenegraph/dist').listFiles().findAll { it.name.endsWith('.jar') || it.name.endsWith('.dll') }
	}

	// TODO create installer
}

task 'package'(dependsOn: ['package-mac', 'package-win']) << {}

/*
task wrapper(type: Wrapper) {
	gradleVersion = '0.9.2'
	jarPath = 'wrapper'
}
*/
