package corelyzer.remoteControl.server.controller.actions;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.IOException;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.KeyStroke;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import corelyzer.data.CoreSection;
import corelyzer.data.Session;
import corelyzer.data.TrackSceneNode;
import corelyzer.data.coregraph.CoreGraph;
import corelyzer.graphics.SceneGraph;
import corelyzer.ui.CorelyzerApp;
import corelyzer.ui.CorelyzerGLCanvas;

public class FineTuneDialog extends JDialog {
	/**
	 * 
	 */
	private static final long serialVersionUID = 8090564334400260613L;

	private static final float DEFAULT_SHIFT = 0.0f;

	public static void main(final String[] args) {
		FineTuneDialog dialog = new FineTuneDialog();
		dialog.pack();
		dialog.setVisible(true);
	}

	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JTextField coreAOriginalDepthTextField;
	private JTextField coreBOriginalDepthTextField;
	private JTextField coreAAdjustedDepthTextField;
	private JTextField coreBAdjustedDepthTextField;
	private JLabel coreALabel;
	private JLabel coreBLabel;
	private JLabel statusLabel;
	private JTextField textField1;
	private JTextField textField2;

	private JLabel tieDepthLabel;

	// For shift information write back
	private BufferedWriter outputWriter;
	// leg, site, hole, core, type, nativeTrackID
	private final int LEG_INDEX = 0;
	private final int SITE_INDEX = 1;

	private final int ID_INDEX = 4;
	private String[] coreA = null;

	private String[] coreB = null;
	private float coreAOrigDepth = 0.0f;

	private float coreBOrigDepth = 0.0f;

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	public FineTuneDialog() {
		setTitle("Fine Tune Status");
		setContentPane(contentPane);
		this.setResizable(false);

		// setModal(true);
		getRootPane().setDefaultButton(buttonOK);

		buttonOK.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onOK();
			}
		});

		buttonCancel.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		});

		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

		addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(final WindowEvent e) {
				onCancel();
			}
		});

		contentPane.registerKeyboardAction(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
	 * edit this method OR call it in your code!
	 * 
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		panel1.add(panel2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		buttonCancel = new JButton();
		buttonCancel.setText("Cancel");
		panel2.add(buttonCancel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonOK = new JButton();
		buttonOK.setText("OK");
		panel2.add(buttonOK, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		statusLabel = new JLabel();
		statusLabel.setText("Status: Loading...");
		panel1.add(statusLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
		contentPane
				.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		final Spacer spacer2 = new Spacer();
		panel3.add(spacer2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
				GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		coreALabel = new JLabel();
		coreALabel.setText("Leg: X, Site: X, Hole: X, Core: X, Type: X ");
		panel3.add(coreALabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		coreBLabel = new JLabel();
		coreBLabel.setText("Leg: X, Site: X, Hole: X, Core: X, Type: X ");
		panel3.add(coreBLabel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Original Top Depth (m)");
		panel3.add(label1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		coreAOriginalDepthTextField = new JTextField();
		coreAOriginalDepthTextField.setEditable(false);
		coreAOriginalDepthTextField.setHorizontalAlignment(11);
		coreAOriginalDepthTextField.setText("0.0");
		panel3.add(coreAOriginalDepthTextField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		coreBOriginalDepthTextField = new JTextField();
		coreBOriginalDepthTextField.setEditable(false);
		coreBOriginalDepthTextField.setHorizontalAlignment(11);
		coreBOriginalDepthTextField.setText("0.0");
		panel3.add(coreBOriginalDepthTextField, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Adjusted Top Depth (m)");
		panel3.add(label2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		coreAAdjustedDepthTextField = new JTextField();
		coreAAdjustedDepthTextField.setEditable(false);
		coreAAdjustedDepthTextField.setHorizontalAlignment(11);
		coreAAdjustedDepthTextField.setText("0.0");
		panel3.add(coreAAdjustedDepthTextField, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		coreBAdjustedDepthTextField = new JTextField();
		coreBAdjustedDepthTextField.setEditable(false);
		coreBAdjustedDepthTextField.setHorizontalAlignment(11);
		coreBAdjustedDepthTextField.setText("0.0");
		panel3.add(coreBAdjustedDepthTextField, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		panel3.add(panel4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setText("Reference Core");
		panel4.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer3 = new Spacer();
		panel4.add(spacer3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		textField1 = new JTextField();
		textField1.setBackground(new Color(-65536));
		textField1.setEditable(false);
		textField1.setEnabled(true);
		panel4.add(textField1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(10, -1), new Dimension(24, 28), null, 0, false));
		final JPanel panel5 = new JPanel();
		panel5.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		panel3.add(panel5, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JLabel label4 = new JLabel();
		label4.setText("Matched Core");
		panel5.add(label4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(94, 16), null, 0, false));
		final Spacer spacer4 = new Spacer();
		panel5.add(spacer4, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		textField2 = new JTextField();
		textField2.setBackground(new Color(-16711936));
		textField2.setEditable(false);
		panel5.add(textField2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(10, -1), new Dimension(24, 28), null, 0, false));
		tieDepthLabel = new JLabel();
		tieDepthLabel.setText("Tie depth: XXX (m)");
		panel3.add(tieDepthLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	@Override
	public void dispose() {
		CorelyzerGLCanvas.setFineTune(false, null);

		super.dispose();
	}

	public JTextField getCoreAAdjustedDepthTextField() {
		return coreAAdjustedDepthTextField;
	}

	public int getCoreANativeID() {
		if (coreA != null) {
			return Integer.parseInt(coreA[ID_INDEX]);
		} else {
			return -1;
		}
	}

	public float getCoreAOrigDepth() {
		return coreAOrigDepth;
	}

	public JTextField getCoreBAdjustedDepthTextField() {
		return coreBAdjustedDepthTextField;
	}

	public int getCoreBNativeID() {
		if (coreB != null) {
			return Integer.parseInt(coreB[ID_INDEX]);
		} else {
			return -1;
		}
	}

	public float getCoreBOrigDepth() {
		return coreBOrigDepth;
	}

	public BufferedWriter getOutputWriter() {
		return outputWriter;
	}

	public JLabel getStatusLabel() {
		return statusLabel;
	}

	private void onCancel() {
		if (CorelyzerApp.getApp() == null) {
			this.dispose();
			return;
		}

		// Reset both cores to their original depth
		float currentY = SceneGraph.getTrackYPos(this.getCoreANativeID());
		SceneGraph.moveTrackAbsX(getCoreANativeID(), 0.0f);
		SceneGraph.moveTrackAbsY(getCoreANativeID(), currentY);

		currentY = SceneGraph.getTrackYPos(this.getCoreBNativeID());
		SceneGraph.moveTrackAbsX(getCoreBNativeID(), 0.0f);
		SceneGraph.moveTrackAbsY(getCoreBNativeID(), currentY);

		try {
			String mesg = "" + FineTuneDialog.DEFAULT_SHIFT;
			outputWriter.write(mesg);
			outputWriter.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}

		SceneGraph.setTrackMovable(Integer.valueOf(coreA[ID_INDEX]), false);
		SceneGraph.setTrackMovable(Integer.valueOf(coreB[ID_INDEX]), false);
		SceneGraph.setTieDepth(false, 0.0f);

		CorelyzerApp.getApp().updateGLWindows();

		dispose();
	}

	private void onOK() {
		// Re-calculate all section's depth and reset track's depth
		if (outputWriter != null) {
			CoreGraph cg = CoreGraph.getInstance();

			float coreAShiftInMeters = 0.0f;
			float coreBShiftInMeters = 0.0f;

			if (coreA != null) {
				int trackID = Integer.parseInt(coreA[ID_INDEX]);
				float depthShiftInPixel = SceneGraph.getTrackXPos(trackID);
				coreAShiftInMeters = 2.54f * depthShiftInPixel / (SceneGraph.getCanvasDPIX(0) * 100.0f);

				// apply shift to all sections in this track
				String sessionName = coreA[LEG_INDEX] + "_" + coreA[SITE_INDEX];
				Session session = cg.getSession(sessionName);
				if (session != null) {
					TrackSceneNode t = session.getTrackSceneNodeWithTrackId(trackID);

					if (t != null) {
						for (CoreSection cs : t.getCoreSections()) {
							if (cs != null) {
								int csId = cs.getId();
								SceneGraph.moveSection(trackID, csId, depthShiftInPixel, 0.0f);
							}
						}

						// reset coreA's track X position to 0.0
						SceneGraph.moveTrackAbsX(trackID, 0.0f);
					}
				}
			}

			if (coreB != null) {
				int trackID = Integer.parseInt(coreB[ID_INDEX]);
				float depthShiftInPixel = SceneGraph.getTrackXPos(trackID);
				coreBShiftInMeters = 2.54f * depthShiftInPixel / (SceneGraph.getCanvasDPIX(0) * 100.0f);

				String sessionName = coreB[LEG_INDEX] + "_" + coreB[SITE_INDEX];
				Session session = cg.getSession(sessionName);
				if (session != null) {
					TrackSceneNode t = session.getTrackSceneNodeWithTrackId(trackID);

					if (t != null) {
						for (CoreSection cs : t.getCoreSections()) {
							if (cs != null) {
								int csId = cs.getId();
								SceneGraph.moveSection(trackID, csId, depthShiftInPixel, 0.0f);
							}
						}

						// reset coreB's track X position to 0.0
						SceneGraph.moveTrackAbsX(trackID, 0.0f);
					}
				}
			}

			// Return shifts made in coreA and coreB
			try {
				String mesg = "" + coreAShiftInMeters + "\t" + coreBShiftInMeters;
				outputWriter.write(mesg);
				outputWriter.flush();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		SceneGraph.setTrackMovable(Integer.valueOf(coreA[ID_INDEX]), false);
		SceneGraph.setTrackHighlightColor(Integer.valueOf(coreA[ID_INDEX]), 1.0f, 1.0f, 0.0f);

		SceneGraph.setTrackMovable(Integer.valueOf(coreB[ID_INDEX]), false);
		SceneGraph.setTrackHighlightColor(Integer.valueOf(coreB[ID_INDEX]), 1.0f, 1.0f, 0.0f);

		SceneGraph.setTieDepth(false, 0.0f);

		CorelyzerApp.getApp().updateGLWindows();

		dispose();
	}

	public void setCoreA(final String leg, final String site, final String hole, final String core, final int nativeID) {
		// Update the label
		String labelStr = "Leg: " + leg + ", Site: " + site + ", hole: " + hole + ", core: " + core;
		// debug labelStr += ", nativeID: " + nativeID;
		this.coreALabel.setText(labelStr);

		// Pack core information
		this.coreA = new String[] { leg, site, hole, core, String.valueOf(nativeID) };
	}

	public void setCoreAOrigDepth(final float coreAOrigDepth) {
		this.coreAOrigDepth = coreAOrigDepth;
		this.coreAOriginalDepthTextField.setText(String.valueOf(coreAOrigDepth));
		this.coreAAdjustedDepthTextField.setText(String.valueOf(coreAOrigDepth));
	}

	public void setCoreB(final String leg, final String site, final String hole, final String core, final int nativeID) {
		// Update the label
		String labelStr = "Leg: " + leg + ", Site: " + site + ", hole: " + hole + ", core: " + core;
		// debug labelStr += ", nativeID: " + nativeID;
		this.coreBLabel.setText(labelStr);

		// Pack core information
		this.coreB = new String[] { leg, site, hole, core, String.valueOf(nativeID) };
	}

	public void setCoreBOrigDepth(final float coreBOrigDepth) {
		this.coreBOrigDepth = coreBOrigDepth;
		this.coreBOriginalDepthTextField.setText(String.valueOf(coreBOrigDepth));
		this.coreBAdjustedDepthTextField.setText(String.valueOf(coreBOrigDepth));
	}

	public void setOutputWriter(final BufferedWriter outputWriter) {
		this.outputWriter = outputWriter;
	}

	public void setTieDepth(final float tieDepth) {
		this.tieDepthLabel.setText("Tie depth: " + tieDepth + " (m)");
	}

	@Override
	public void setVisible(final boolean v) {
		if (v) {
			CorelyzerGLCanvas.setFineTune(true, this);
		} else {
			CorelyzerGLCanvas.setFineTune(false, null);
		}

		super.setVisible(v);
	}
}
