package corelyzer.sessionSharing.server.view;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Hashtable;
import java.util.Map;
import java.util.prefs.Preferences;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import corelyzer.sessionSharing.server.model.SharingServerApplication;

public class SharingServerLauncher extends JDialog {
	/**
	 * 
	 */
	private static final long serialVersionUID = -6082426040789654625L;

	public static void main(final String[] args) {
		SharingServerLauncher dialog = new SharingServerLauncher();
		dialog.pack();
		dialog.setSize(640, 480);
		dialog.setLocationRelativeTo(null);
		dialog.setVisible(true);
		System.exit(0);
	}

	private JPanel contentPane;
	private JButton startButton;
	private JButton stopButton;
	private JTextField serverNameField;
	private JTextField serverAddressField;
	private JTextField serverPortField;
	private JTextArea logArea;
	private JTextField pathPrefixField;

	private JTextField urlPrefixField;

	private SharingServerApplication aServer;
	private final Preferences prefs;

	private final Hashtable<String, JTextField> keyUIMap;

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	public SharingServerLauncher() {
		keyUIMap = new Hashtable<String, JTextField>();
		createUIMap();

		prefs = Preferences.userNodeForPackage(this.getClass());
		applyPrefs();

		setTitle("SharingServer Launcher");
		this.stopButton.setEnabled(false);

		setContentPane(contentPane);
		setModal(true);
		getRootPane().setDefaultButton(startButton);

		startButton.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onStart();
			}
		});

		stopButton.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onStop();
			}
		});

		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(final WindowEvent e) {
				onCancel();
			}
		});

		contentPane.registerKeyboardAction(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
	 * edit this method OR call it in your code!
	 * 
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
		panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		startButton = new JButton();
		startButton.setText("Start");
		panel2.add(startButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		stopButton = new JButton();
		stopButton.setText("Stop");
		panel2.add(stopButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane
				.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Server name: ");
		panel3.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Server IP address: ");
		panel3.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setText("Server Port: ");
		panel3.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		serverNameField = new JTextField();
		serverNameField.setHorizontalAlignment(11);
		serverNameField.setText("Default Session Sharing Server");
		panel3.add(serverNameField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		serverAddressField = new JTextField();
		serverAddressField.setHorizontalAlignment(11);
		serverAddressField.setText("127.0.0.1");
		panel3.add(serverAddressField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		serverPortField = new JTextField();
		serverPortField.setHorizontalAlignment(11);
		serverPortField.setText("16688");
		panel3.add(serverPortField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final Spacer spacer2 = new Spacer();
		panel3.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
				GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final JLabel label4 = new JLabel();
		label4.setText("Path prefix: ");
		panel3.add(label4, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		pathPrefixField = new JTextField();
		pathPrefixField.setHorizontalAlignment(11);
		pathPrefixField.setText("/Users/julian/Sites/CSS/share");
		panel3.add(pathPrefixField, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JLabel label5 = new JLabel();
		label5.setText("Url prefix: ");
		panel3.add(label5, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		urlPrefixField = new JTextField();
		urlPrefixField.setHorizontalAlignment(11);
		urlPrefixField.setText("http://127.0.0.1/~julian/CSS/share");
		panel3.add(urlPrefixField, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JScrollPane scrollPane1 = new JScrollPane();
		contentPane.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		logArea = new JTextArea();
		logArea.setText("");
		scrollPane1.setViewportView(logArea);
	}

	private void applyPrefs() {
		if (this.prefs == null) {
			return;
		}

		for (Map.Entry<String, JTextField> entry : this.keyUIMap.entrySet()) {
			String key = entry.getKey();
			JTextField ui = entry.getValue();

			String value = prefs.get(key, "");
			ui.setText(value);
		}
	}

	private void createUIMap() {
		if (this.keyUIMap == null) {
			return;
		}

		keyUIMap.put("serverName", this.serverNameField);
		keyUIMap.put("serverAddress", this.serverAddressField);
		keyUIMap.put("serverPort", this.serverPortField);
		keyUIMap.put("pathPrefix", this.pathPrefixField);
		keyUIMap.put("urlPrefix", this.urlPrefixField);
	}

	private void onCancel() {
		onStop();
		dispose();
	}

	private void onStart() {
		this.setPrefs();
		this.startButton.setEnabled(false);

		Runnable startTask = new Runnable() {

			public void run() {
				String srvName = serverNameField.getText();
				String srvIP = serverAddressField.getText();
				int srvPort = Integer.parseInt(serverPortField.getText());

				String pathPrefix = pathPrefixField.getText();
				String urlPrefix = urlPrefixField.getText();

				aServer = new SharingServerApplication(srvName, srvIP, srvPort);
				aServer.setPathPrefix(pathPrefix);
				aServer.setUrlPrefix(urlPrefix);

				aServer.setLogger(logArea);

				aServer.init();
				aServer.start();

				while (!aServer.isAlive()) {
					try {
						Thread.sleep(10);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

				SwingUtilities.invokeLater(new Runnable() {

					public void run() {
						stopButton.setEnabled(true);
					}
				});
			}
		};
		new Thread(startTask).start();
	}

	private void onStop() {
		stopButton.setEnabled(false);

		Runnable stopTask = new Runnable() {

			public void run() {
				if (aServer != null) {
					aServer.setRunning(false);

					while (aServer.isAlive()) {
						try {
							Thread.sleep(10);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}

					SwingUtilities.invokeLater(new Runnable() {

						public void run() {
							startButton.setEnabled(true);
							stopButton.setEnabled(false);
						}
					});
				}
			}
		};
		new Thread(stopTask).start();
	}

	private void setPrefs() {
		if (this.prefs == null) {
			return;
		}

		for (Map.Entry<String, JTextField> entry : this.keyUIMap.entrySet()) {
			String key = entry.getKey();
			JTextField ui = entry.getValue();

			String value = ui.getText();
			prefs.put(key, value);
		}
	}
}
