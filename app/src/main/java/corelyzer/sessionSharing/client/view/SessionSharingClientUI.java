package corelyzer.sessionSharing.client.view;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import corelyzer.data.CRPreferences;
import corelyzer.io.StateWriter;
import corelyzer.sessionSharing.client.controller.SharingClient;
import corelyzer.sessionSharing.common.SharingServerResponse;
import corelyzer.ui.CorelyzerApp;
import corelyzer.util.FileUtility;

/**
 * UI class for client operations: Publish, List, Download, Subscribe
 */
public class SessionSharingClientUI extends JDialog {
	/**
	 * 
	 */
	private static final long serialVersionUID = 6188795707653919903L;

	public static void main(final String[] args) {
		SessionSharingClientUI dialog = new SessionSharingClientUI();
		dialog.pack();
		dialog.setSize(600, 600);
		dialog.setLocationRelativeTo(null);
		dialog.setVisible(true);
		System.exit(0);
	}

	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JTextField usernameTextField;
	private JTextArea descriptionTextArea;
	private JLabel progressIndicator;

	private JTextField sessionNameTextField;
	// private JButton listButton;
	// private JButton shutdownButton;
	// Status indicator
	ImageIcon runIcon;

	ImageIcon stopIcon;
	String serverAddress;

	int serverPort;

	SessionSharingClientUI view;

	/*
	 * private void onShutdown() { // delegte to client code execution
	 * SharingClient client = new SharingClient(this);
	 * 
	 * client.setShutdownOperation(serverAddress, serverPort); byte res =
	 * client.execute();
	 * 
	 * if (res != SharingServerResponse.SHUTDOWN_SUCCESS) { String mesg =
	 * "Cannot SHUTDOWN server \n'" + serverAddress + "'";
	 * JOptionPane.showMessageDialog(this, mesg); } else { String mesg =
	 * "Server '" + serverAddress + "' is SHUTDOWN."; System.out.println(mesg);
	 * JOptionPane.showMessageDialog(this, mesg); } }
	 * 
	 * private void onList() { // delegte to client code execution SharingClient
	 * client = new SharingClient(this);
	 * client.setConnectOperation(serverAddress, serverPort);
	 * 
	 * // try connect first byte res = client.execute(); if (res !=
	 * SharingServerResponse.CONNECTED) { // this.setRunningIndicator(false,
	 * "Idle");
	 * 
	 * String mesg = "Cannot connect to server \n'" + serverAddress + "'";
	 * JOptionPane.showMessageDialog(this, mesg); return; }
	 * 
	 * // do real list client.setListOperation(); res = client.execute();
	 * 
	 * if (res != SharingServerResponse.LIST_SUCCESS) { String mesg =
	 * "Cannot list"; JOptionPane.showMessageDialog(this, mesg); } else {
	 * Vector<Hashtable<String, String>> sessions = client.getListResult(); if
	 * (sessions != null) { SessionSharingListUI listUI = new
	 * SessionSharingListUI(); listUI.setAlwaysOnTop(true);
	 * listUI.setSessions(sessions); listUI.pack(); listUI.setSize(800, 600);
	 * listUI.setLocationRelativeTo(this); listUI.setVisible(true); } } }
	 */

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	public SessionSharingClientUI() {
		setTitle("Share your session");
		view = this;

		setContentPane(contentPane);
		setModal(true);
		getRootPane().setDefaultButton(buttonOK);

		buttonOK.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onOK();
			}
		});

		buttonCancel.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		});

		/*
		 * this.listButton.addActionListener(new ActionListener() { public void
		 * actionPerformed(ActionEvent e) { onList(); } });
		 * 
		 * this.shutdownButton.addActionListener(new ActionListener() { public
		 * void actionPerformed(ActionEvent e) { onShutdown(); } });
		 */

		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(final WindowEvent e) {
				onCancel();
			}
		});

		contentPane.registerKeyboardAction(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		// Status indicator
		runIcon = new ImageIcon(getClass().getResource("/corelyzer/ui/resources/indicator.gif"));
		stopIcon = new ImageIcon(getClass().getResource("/corelyzer/ui/resources/pi.png"));

		// this.setRunningIndicator(false, "Idle");

		// Fetch setup preferences if available
		CorelyzerApp app = CorelyzerApp.getApp();

		if (app == null) {
			this.setServerAddress("127.0.0.1");
			this.setServerPort(16688);
		} else {
			CRPreferences prefs = app.preferences();

			String srvAddr;
			int srvPort;

			if (prefs.getProperty("sessionSharing.serverAddress") == null || prefs.getProperty("sessionSharing.serverAddress").equals("")) {
				srvAddr = "127.0.0.1";
			} else {
				srvAddr = prefs.getProperty("sessionSharing.serverAddress");
			}

			if (prefs.getProperty("sessionSharing.serverPort") == null || prefs.getProperty("sessionSharing.serverPort").equals("")) {
				srvPort = 16688;
			} else {
				srvPort = Integer.parseInt(prefs.getProperty("sessionSharing.serverPort"));
			}

			this.setServerAddress(srvAddr);
			this.setServerPort(srvPort);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
	 * edit this method OR call it in your code!
	 * 
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
		panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		buttonCancel = new JButton();
		buttonCancel.setText("Close");
		panel2.add(buttonCancel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonOK = new JButton();
		buttonOK.setText("Submit");
		panel2.add(buttonOK, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel2.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		progressIndicator = new JLabel();
		progressIndicator.setText("s");
		panel2.add(progressIndicator, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane
				.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Username: ");
		panel3.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Description: ");
		panel3.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JScrollPane scrollPane1 = new JScrollPane();
		scrollPane1.setAutoscrolls(true);
		panel3.add(scrollPane1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
				false));
		descriptionTextArea = new JTextArea();
		descriptionTextArea.setEnabled(true);
		descriptionTextArea.setLineWrap(true);
		descriptionTextArea.setText("");
		scrollPane1.setViewportView(descriptionTextArea);
		usernameTextField = new JTextField();
		panel3.add(usernameTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setText("Session name: ");
		panel3.add(label3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		sessionNameTextField = new JTextField();
		sessionNameTextField.setText("aDefaultSessionName");
		panel3.add(sessionNameTextField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
	}

	public String getServerAddress() {
		return serverAddress;
	}

	public int getServerPort() {
		return serverPort;
	}

	private void onCancel() {
		dispose();
	}

	private void onOK() {
		CorelyzerApp app = CorelyzerApp.getApp();

		final String username = this.usernameTextField.getText();
		final String sessionName = this.sessionNameTextField.getText();
		final String desc = this.descriptionTextArea.getText();

		if (username.equals("") || sessionName.equals("") || desc.equals("")) {
			JOptionPane.showMessageDialog(view, "Username, session name and description cannot be empty.");
			return;
		}

		// Publish and get on-screen ack
		File tempFile = null;

		try {
			if (app == null) {
				// for testing
				tempFile = new File("/Users/julian/Desktop/CSS/EmptyTestSession.cml");
			} else {
				tempFile = File.createTempFile("corelyzerSession-", null);
				tempFile.deleteOnExit();

				System.out.println("---> [INFO] Temp session file is: " + tempFile.getAbsolutePath());

				StateWriter sWriter = new StateWriter();
				sWriter.writeState(tempFile.getAbsolutePath());
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		if (tempFile == null) {
			JOptionPane.showMessageDialog(this, "Cannot create a session file at local. Abort.");
			dispose();
			return;
		}

		final String sessionStr;
		try {
			sessionStr = FileUtility.getFileContentAsAString(tempFile);
		} catch (IOException e) {
			JOptionPane.showMessageDialog(this, "Cannot get session as a string. Abort.");
			dispose();
			return;
		}

		Runnable submitTask = new Runnable() {

			public void run() {
				// delegte to client code execution
				SharingClient client = new SharingClient(view);

				// Try to find the server
				client.setConnectOperation(serverAddress, serverPort);
				// this.setRunningIndicator(true, "Connecting to server...");
				byte res = client.execute();

				if (res != SharingServerResponse.CONNECTED) {
					// this.setRunningIndicator(false, "Idle");

					String mesg = "Cannot connect to server \n'" + serverAddress + "'";
					JOptionPane.showMessageDialog(view, mesg);
					return;
				}

				// this.setRunningIndicator(true, "Publishing...");
				client.setPublishOperation(username, sessionName, desc, sessionStr);
				res = client.execute();

				if (res != SharingServerResponse.PUBLISH_SUCCESS) {
					// this.setRunningIndicator(false, "Publish failed");

					String mesg = "Cannot Publish";
					JOptionPane.showMessageDialog(view, mesg);
					return;
				}

				// this.setRunningIndicator(false, "Idle");
				String cmlURL = client.getCmlURL();
				String feedURL = client.getFeedURL();
				String mesg = "Publish success.\n" + "Download URL: " + cmlURL + "\nSubscribe URL: " + feedURL;
				JOptionPane.showMessageDialog(view, mesg);

				dispose();
			}
		};
		new Thread(submitTask).start();
	}

	public void setRunningIndicator(final boolean b, final String message) {
		final ImageIcon icon;
		if (b) {
			icon = runIcon;
		} else {
			icon = stopIcon;
		}

		SwingUtilities.invokeLater(new Runnable() {

			public void run() {
				progressIndicator.setIcon(icon);
				progressIndicator.setText(message);
			}
		});
	}

	public void setServerAddress(final String serverAddress) {
		this.serverAddress = serverAddress;
	}

	public void setServerPort(final int serverPort) {
		this.serverPort = serverPort;
	}

	@Override
	public void setVisible(final boolean b) {
		String defaultUsername = System.getProperty("user.name");
		this.usernameTextField.setText(defaultUsername);

		String mesg = "Please input a brief description of " + "the session you are working on.";
		this.descriptionTextArea.setText(mesg);
		descriptionTextArea.setSelectionStart(0);
		descriptionTextArea.setSelectionEnd(mesg.length() - 1);
		super.setVisible(b);
	}
}
