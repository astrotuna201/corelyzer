/******************************************************************************
 *
 * CoreWall / Corelyzer - An Initial Core Description Tool
 * Copyright (C) 2008 Julian Yu-Chung Chen
 * Electronic Visualization Laboratory, University of Illinois at Chicago
 *
 * This software is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either Version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser Public License along
 * with this software; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * Questions or comments about CoreWall should be directed to
 * cavern@evl.uic.edu
 *
 *****************************************************************************/
package corelyzer.ui;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import corelyzer.controller.CRExperimentController;
import corelyzer.data.CoreSection;
import corelyzer.data.coregraph.CoreGraph;
import corelyzer.graphics.SceneGraph;

public class SectionImagePropertyDialog extends JDialog {
	/**
	 * 
	 */
	private static final long serialVersionUID = 2265058018882176219L;

	public static void main(final String[] args) {
		SectionImagePropertyDialog dialog = new SectionImagePropertyDialog(null);
		dialog.pack();
		dialog.setLocationRelativeTo(null);
		dialog.setVisible(true);
		System.exit(0);
	}

	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JTextArea miscInfoField;
	private JTextField dpix_field;
	private JTextField dpiy_field;
	private JTextField rotationField;
	private JButton applyButton;
	private JTextField lengthField;
	private JTextField widthField;
	private JComboBox orientationBox;
	private JTextField depthField;
	private JTextField intervalTopField;
	private JSlider topSlider;
	private JTextField intervalBottomField;
	private JSlider bottomSlider;
	private JButton helpButton;
	private JButton degreeDecButton;
	private JButton degreeIncButton;
	private JTextField incField;
	private JRadioButton useMeasureButton;
	private JRadioButton useDPIButton;
	private JComboBox applyTargetOption;
	private JButton nextButton;
	private JButton previousButton;
	private JLabel bottomVisLabel;
	private JLabel topDepthLabel;
	private JLabel topVisLabel;
	private JLabel unitLabel2;
	private JLabel unitLabel1;

	private JLabel unitLabel3;
	// current active
	int trackId, sectionId;
	int sectionIndex = 0;

	int[] allSectionIds; // all
	float pre_dpix;
	float pre_dpiy;
	float pre_rotation;
	float pre_top;
	float pre_bottom;

	int pre_orientation;

	int last_orientationIndex = 0;

	float imageWidth, imageHeight;
	// Apply target indices
	final static private int APPLY_TARGET_SECTION = 0;

	final static private int APPLY_TARGET_SELECTED = 1;

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	public SectionImagePropertyDialog(final Component f) {
		super();
		setAlwaysOnTop(true);
		setLocationRelativeTo(f);
		setTitle("Image Section Properties");

		setContentPane(contentPane);
		setModal(true);
		getRootPane().setDefaultButton(this.applyButton);

		buttonOK.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onOK();
			}
		});

		buttonCancel.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		});

		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(final WindowEvent e) {
				onCancel();
			}
		});

		contentPane.registerKeyboardAction(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
		applyButton.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent event) {
				onApply();
			}
		});

		final JDialog parent = this;
		rotationField.addKeyListener(new KeyAdapter() {

			@Override
			public void keyTyped(final KeyEvent event) {
				super.keyTyped(event);

				if (event.getKeyChar() == KeyEvent.VK_ENTER) {
					float value = 0.0f;
					try {
						value = Float.parseFloat(rotationField.getText());
					} catch (NumberFormatException e) {
						JOptionPane.showMessageDialog(parent, "Number Format Error!");

						rotationField.setText("" + 0.0f);
					}

					// call to native
					if (CorelyzerApp.getApp() != null) {
						SceneGraph.rotateSection(trackId, sectionId, value);

						CorelyzerApp.getApp().updateGLWindows();
					}
				}
			}
		});

		orientationBox.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent event) {
				// only flip if orientation changed
				if (last_orientationIndex != orientationBox.getSelectedIndex()) {
					// swap length & width
					String t = lengthField.getText();
					lengthField.setText(widthField.getText());
					widthField.setText(t);

					// swap dpi values
					t = dpix_field.getText();
					dpix_field.setText(dpiy_field.getText());
					dpiy_field.setText(t);

					// update slider max
					int max = (int) Math.ceil(10 * Float.parseFloat(lengthField.getText()));
					topSlider.setMaximum(max);
					bottomSlider.setMaximum(max);

					if (CorelyzerApp.getApp() == null) {
						return;
					}

					boolean isPortrait = orientationBox.getSelectedIndex() == 1;
					SceneGraph.setSectionOrientation(trackId, sectionId, isPortrait);

					last_orientationIndex = orientationBox.getSelectedIndex();
					CorelyzerApp.getApp().updateGLWindows();
				}
			}
		});

		topSlider.addChangeListener(new ChangeListener() {
			public void stateChanged(final ChangeEvent event) {
				int value = topSlider.getValue();
				float realValue = value / 10.0f;
				intervalTopField.setText(String.valueOf(realValue));
				bottomSlider.setMinimum(value + 1);

				SceneGraph.setSectionIntervalTop(trackId, sectionId, realValue);
				CorelyzerApp.getApp().updateGLWindows();
			}
		});

		bottomSlider.addChangeListener(new ChangeListener() {
			public void stateChanged(final ChangeEvent event) {
				int value = bottomSlider.getValue();
				float realValue = value / 10.0f;
				intervalBottomField.setText(String.valueOf(realValue));
				topSlider.setMaximum(value - 1);

				SceneGraph.setSectionIntervalBottom(trackId, sectionId, realValue);

				CorelyzerApp.getApp().updateGLWindows();
			}
		});

		degreeDecButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent event) {
				float origValue = Float.parseFloat(rotationField.getText());
				float incVal = Float.parseFloat(incField.getText());

				rotationField.setText(String.valueOf(origValue - incVal));
				applyRotation();
			}
		});

		degreeIncButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent event) {
				float origValue = Float.parseFloat(rotationField.getText());
				float incVal = Float.parseFloat(incField.getText());

				rotationField.setText(String.valueOf(origValue + incVal));
				applyRotation();
			}
		});

		useMeasureButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent event) {
				onChecked();
			}
		});

		useDPIButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent event) {
				onChecked();
			}
		});

		nextButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent event) {
				onNext();
			}
		});
		previousButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent event) {
				onPrevious();
			}
		});
		helpButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent event) {
				onHelp();
			}
		});

		applyTargetOption.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent actionEvent) {
				int targetIdx = applyTargetOption.getSelectedIndex();
				boolean isSingleSection = targetIdx == APPLY_TARGET_SECTION;

				// Enable/disable uncommon options
				depthField.setEnabled(isSingleSection);
				topDepthLabel.setEnabled(isSingleSection);

				intervalTopField.setEnabled(isSingleSection);
				topSlider.setEnabled(isSingleSection);
				topVisLabel.setEnabled(isSingleSection);

				intervalBottomField.setEnabled(isSingleSection);
				bottomSlider.setEnabled(isSingleSection);
				bottomVisLabel.setEnabled(isSingleSection);

				// Next and Previous button
				if (isSingleSection) {
					if (sectionIndex == 0) { // the first
						nextButton.setEnabled(true);
						previousButton.setEnabled(false);
					} else if (sectionIndex == allSectionIds.length - 1) {// last
						nextButton.setEnabled(false);
						previousButton.setEnabled(true);
					} else {
						nextButton.setEnabled(true);
						previousButton.setEnabled(true);
					}

				} else {
					nextButton.setEnabled(false);
					previousButton.setEnabled(false);
				}
			}
		});
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
	 * edit this method OR call it in your code!
	 * 
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 6, new Insets(0, 0, 0, 0), -1, -1));
		panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		helpButton = new JButton();
		helpButton.setEnabled(true);
		helpButton.setText("Help");
		panel2.add(helpButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonCancel = new JButton();
		buttonCancel.setText("Cancel");
		panel2.add(buttonCancel, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonOK = new JButton();
		buttonOK.setText("OK");
		panel2.add(buttonOK, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel2.add(spacer1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		nextButton = new JButton();
		nextButton.setEnabled(false);
		nextButton.setText("Next");
		panel2.add(nextButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		previousButton = new JButton();
		previousButton.setEnabled(false);
		previousButton.setText("Previous");
		panel2.add(previousButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane
				.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		final JScrollPane scrollPane1 = new JScrollPane();
		panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
				false));
		miscInfoField = new JTextArea();
		scrollPane1.setViewportView(miscInfoField);
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane
				.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		final JPanel panel5 = new JPanel();
		panel5.setLayout(new GridLayoutManager(10, 4, new Insets(0, 0, 0, 0), -1, -1));
		panel4.add(panel5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Length: ");
		panel5.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		lengthField = new JTextField();
		lengthField.setHorizontalAlignment(11);
		lengthField.setText("1.0");
		panel5.add(lengthField, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		useMeasureButton = new JRadioButton();
		useMeasureButton.setSelected(true);
		useMeasureButton.setText("Use Measure");
		panel5.add(useMeasureButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("cm");
		panel5.add(label2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		topVisLabel = new JLabel();
		topVisLabel.setText("<html>Visible<br> Interval Begin:</html> ");
		topVisLabel.setToolTipText("Visible interval begin");
		panel5.add(topVisLabel, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(103, 16), null, 0, false));
		unitLabel1 = new JLabel();
		unitLabel1.setText("cm");
		panel5.add(unitLabel1, new GridConstraints(6, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel6 = new JPanel();
		panel6.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel5.add(panel6, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		panel6.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
		intervalTopField = new JTextField();
		intervalTopField.setHorizontalAlignment(11);
		intervalTopField.setText("0.0");
		panel6.add(intervalTopField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		topSlider = new JSlider();
		topSlider.setMaximum(499);
		topSlider.setValue(0);
		panel6.add(topSlider, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(123, 29), null, 0, false));
		useDPIButton = new JRadioButton();
		useDPIButton.setText("Use DPI");
		panel5.add(useDPIButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setText("DPI_X: ");
		panel5.add(label3, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		dpix_field = new JTextField();
		dpix_field.setEnabled(false);
		dpix_field.setHorizontalAlignment(11);
		dpix_field.setText("254.0");
		panel5.add(dpix_field, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label4 = new JLabel();
		label4.setText("Width: ");
		panel5.add(label4, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		widthField = new JTextField();
		widthField.setHorizontalAlignment(11);
		widthField.setText("1.0");
		panel5.add(widthField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label5 = new JLabel();
		label5.setText("cm");
		panel5.add(label5, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label6 = new JLabel();
		label6.setText("DPI_Y: ");
		panel5.add(label6, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		dpiy_field = new JTextField();
		dpiy_field.setEnabled(false);
		dpiy_field.setHorizontalAlignment(11);
		dpiy_field.setText("254.0");
		panel5.add(dpiy_field, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		bottomVisLabel = new JLabel();
		bottomVisLabel.setEnabled(true);
		bottomVisLabel.setText("<html>Visible<br>Interval End:</html> ");
		bottomVisLabel.setToolTipText("Visible interval end");
		panel5.add(bottomVisLabel, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(103, 16), null, 0, false));
		final JPanel panel7 = new JPanel();
		panel7.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel5.add(panel7, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		panel7.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
		intervalBottomField = new JTextField();
		intervalBottomField.setHorizontalAlignment(11);
		intervalBottomField.setText("100");
		panel7.add(intervalBottomField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		bottomSlider = new JSlider();
		bottomSlider.setMaximum(999);
		bottomSlider.setMinimum(500);
		bottomSlider.setValue(999);
		panel7.add(bottomSlider, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(123, 29), null, 0, false));
		unitLabel2 = new JLabel();
		unitLabel2.setText("cm");
		panel5.add(unitLabel2, new GridConstraints(7, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label7 = new JLabel();
		label7.setText("dpi");
		panel5.add(label7, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label8 = new JLabel();
		label8.setText("dpi");
		panel5.add(label8, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label9 = new JLabel();
		label9.setText("<html>Original<br>Image Orientation: </html>");
		label9.setToolTipText("Original Image Orientation");
		panel5.add(label9, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		orientationBox = new JComboBox();
		final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
		defaultComboBoxModel1.addElement("Horizontal");
		defaultComboBoxModel1.addElement("Vertical");
		orientationBox.setModel(defaultComboBoxModel1);
		orientationBox.setToolTipText("Original Image Orientation");
		panel5.add(orientationBox, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label10 = new JLabel();
		label10.setText("Image Rotation");
		panel5.add(label10, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel8 = new JPanel();
		panel8.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel5.add(panel8, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		panel8.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
		rotationField = new JTextField();
		rotationField.setHorizontalAlignment(11);
		rotationField.setText("0.0");
		panel8.add(rotationField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel9 = new JPanel();
		panel9.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		panel8.add(panel9, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		degreeDecButton = new JButton();
		degreeDecButton.setText("<");
		degreeDecButton.setToolTipText("Decrease Rotation");
		panel9.add(degreeDecButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(10, -1),
				null, 0, false));
		incField = new JTextField();
		incField.setHorizontalAlignment(0);
		incField.setText("2.0");
		incField.setToolTipText("Rotation Increment");
		panel9.add(incField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		degreeIncButton = new JButton();
		degreeIncButton.setText(">");
		degreeIncButton.setToolTipText("Increase Rotation");
		panel9.add(degreeIncButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(10, -1),
				null, 0, false));
		final JLabel label11 = new JLabel();
		label11.setText("degree");
		panel5.add(label11, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		applyTargetOption = new JComboBox();
		applyTargetOption.setEnabled(true);
		final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
		defaultComboBoxModel2.addElement("This section only");
		defaultComboBoxModel2.addElement("All selected sections");
		applyTargetOption.setModel(defaultComboBoxModel2);
		panel5.add(applyTargetOption, new GridConstraints(9, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		applyButton = new JButton();
		applyButton.setText("Apply");
		panel5.add(applyButton, new GridConstraints(9, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label12 = new JLabel();
		label12.setText("Apply to:");
		panel5.add(label12, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		depthField = new JTextField();
		depthField.setHorizontalAlignment(11);
		depthField.setText("0.0");
		depthField.setToolTipText("mbsf");
		panel5.add(depthField, new GridConstraints(8, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		topDepthLabel = new JLabel();
		topDepthLabel.setText("<html>Image<br>Top Depth</html>");
		panel5.add(topDepthLabel, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		unitLabel3 = new JLabel();
		unitLabel3.setText("m");
		panel5.add(unitLabel3, new GridConstraints(8, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		ButtonGroup buttonGroup;
		buttonGroup = new ButtonGroup();
		buttonGroup.add(useMeasureButton);
		buttonGroup.add(useDPIButton);
	}

	private void applyRotation() {
		float rotation;
		try {
			rotation = Float.parseFloat(this.rotationField.getText());
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "Invalid Rotation inputs");
			e.printStackTrace();

			return;
		}

		// call to native
		if (CorelyzerApp.getApp() != null) {
			SceneGraph.rotateSection(trackId, sectionId, rotation);

			CorelyzerApp.getApp().updateGLWindows();
		}
	}

	private void applyToASection() {
		if (CorelyzerApp.getApp() == null) {
			return;
		}

		float depth;
		try {
			depth = Float.parseFloat(this.depthField.getText());
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "Invalid Depth Input");
			e.printStackTrace();

			return;
		}

		float rotation;
		try {
			rotation = Float.parseFloat(this.rotationField.getText());
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "Invalid Rotation input");
			e.printStackTrace();

			return;
		}

		boolean isPortrait = this.orientationBox.getSelectedIndex() == 1;

		float dpix;
		float dpiy;

		if (this.useDPIButton.isSelected()) { // use DPI directly
			try {
				dpix = Float.parseFloat(dpix_field.getText());
				dpiy = Float.parseFloat(dpiy_field.getText());

				float l, w;
				if (isPortrait) {
					l = 2.54f * this.imageHeight / dpix;
					w = 2.54f * this.imageWidth / dpiy;
				} else {
					l = 2.54f * this.imageWidth / dpix;
					w = 2.54f * this.imageHeight / dpiy;
				}

				this.lengthField.setText("" + l);
				this.widthField.setText("" + w);

				// update visible interval bottom max
				int maxValue = (int) Math.ceil(l * 10);
				this.topSlider.setMaximum(maxValue);
				this.bottomSlider.setMaximum(maxValue);
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(this, "Invalid DPI inputs");
				e.printStackTrace();

				return;
			}
		} else { // use physical length and width
			try {
				float length = Float.parseFloat(this.lengthField.getText());
				float width = Float.parseFloat(this.widthField.getText());

				if (isPortrait) {
					dpix = this.imageHeight / (length / 2.54f);
					dpiy = this.imageWidth / (width / 2.54f);
				} else {
					dpix = this.imageWidth / (length / 2.54f);
					dpiy = this.imageHeight / (width / 2.54f);
				}

				this.dpix_field.setText("" + dpix);
				this.dpiy_field.setText("" + dpiy);

				// update visible interval bottom max
				// float label_l =
				// Float.parseFloat(intervalBottomField.getText());
				// if (label_l != pre_bottom) {
				int maxValue = (int) Math.ceil(length * 10);
				this.topSlider.setMaximum(maxValue);
				this.bottomSlider.setMaximum(maxValue);
				// }
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(this, "Invalid Length/Width");
				e.printStackTrace();

				return;
			}
		}

		if (isPortrait) {
			SceneGraph.setSectionDPI(this.trackId, this.sectionId, dpix, dpiy);
		} else {
			SceneGraph.setSectionDPI(this.trackId, this.sectionId, dpiy, dpix);
		}

		SceneGraph.setSectionOrientation(trackId, sectionId, isPortrait);
		SceneGraph.rotateSection(this.trackId, this.sectionId, rotation);

		float intervalTop = Float.valueOf(this.intervalTopField.getText());
		float intervalBottom = Float.valueOf(intervalBottomField.getText());

		// swap top and bottom
		if (intervalTop > intervalBottom) {
			float tmp = intervalTop;
			intervalTop = intervalBottom;
			intervalBottom = tmp;

			// update view
			this.topSlider.setValue((int) Math.floor(intervalTop * 10));
			this.bottomSlider.setValue((int) Math.ceil(intervalBottom * 10));
		}

		SceneGraph.setSectionIntervalTop(trackId, sectionId, intervalTop);
		SceneGraph.setSectionIntervalBottom(trackId, sectionId, intervalBottom);

		// depth: taking into account the intervalTop
		float depthInPx = (depth * 100.0f - intervalTop) / 2.54f * SceneGraph.getCanvasDPIX(0);
		float yPosInPx = SceneGraph.getSectionYPos(trackId, sectionId);
		SceneGraph.positionSection(trackId, sectionId, depthInPx, yPosInPx);

		CorelyzerApp.getApp().updateGLWindows();
	}

	// Apply part of specified options to multiple sections

	private void applyToSections() {
		if (CorelyzerApp.getApp() == null) {
			return;
		}

		float rotation;
		try {
			rotation = Float.parseFloat(this.rotationField.getText());
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "Invalid Rotation input");
			e.printStackTrace();

			return;
		}

		boolean isPortrait = this.orientationBox.getSelectedIndex() == 1;

		float dpix;
		float dpiy;

		if (this.useDPIButton.isSelected()) { // use DPI directly
			try {
				dpix = Float.parseFloat(dpix_field.getText());
				dpiy = Float.parseFloat(dpiy_field.getText());

				float l, w;
				if (isPortrait) {
					l = 2.54f * this.imageHeight / dpix;
					w = 2.54f * this.imageWidth / dpiy;
				} else {
					l = 2.54f * this.imageWidth / dpix;
					w = 2.54f * this.imageHeight / dpiy;
				}

				this.lengthField.setText("" + l);
				this.widthField.setText("" + w);

				// update visible interval bottom max
				int maxValue = (int) Math.ceil(l * 10);
				this.topSlider.setMaximum(maxValue);
				this.bottomSlider.setMaximum(maxValue);
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(this, "Invalid DPI inputs");
				e.printStackTrace();

				return;
			}
		} else { // use physical length and width
			try {
				float length = Float.parseFloat(this.lengthField.getText());
				float width = Float.parseFloat(this.widthField.getText());

				if (isPortrait) {
					dpix = this.imageHeight / (length / 2.54f);
					dpiy = this.imageWidth / (width / 2.54f);
				} else {
					dpix = this.imageWidth / (length / 2.54f);
					dpiy = this.imageHeight / (width / 2.54f);
				}

				this.dpix_field.setText("" + dpix);
				this.dpiy_field.setText("" + dpiy);

				// update visible interval bottom max
				int maxValue = (int) Math.ceil(length * 10);
				this.topSlider.setMaximum(maxValue);
				this.bottomSlider.setMaximum(maxValue);
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(this, "Invalid Length/Width");
				e.printStackTrace();

				return;
			}
		}

		// Looping depends on apply target selection
		switch (this.applyTargetOption.getSelectedIndex()) {
			case APPLY_TARGET_SECTION:
				System.out.println("Apply to single target, shouldn't happen here...");
				break;

			case APPLY_TARGET_SELECTED:
				for (int allSectionId : this.allSectionIds) {
					SceneGraph.setSectionDPI(this.trackId, allSectionId, dpix, dpiy);
					SceneGraph.setSectionOrientation(trackId, allSectionId, isPortrait);
					SceneGraph.rotateSection(this.trackId, allSectionId, rotation);

					// Set full length visible
					float fullLength = 1000.0f;
					SceneGraph.setSectionIntervalTop(trackId, allSectionId, 0);
					SceneGraph.setSectionIntervalBottom(trackId, allSectionId, fullLength);

					CorelyzerApp.getApp().updateGLWindows();
				}

				break;

			default: // only current section
				applyToASection();
		}
	}

	private String generateMetaString(final int tid, final int csid) {
		CoreGraph cg = CoreGraph.getInstance();
		CoreSection cs = cg.getSection(cg.getCurrentSessionIdx(), tid, csid);

		if (cs == null) {
			System.err.println("---> [WARN] CoreSection is null in generateMetaString(): trackId: " + tid + ", csid: " + csid);

			return "Empty string, because of null CoreSection";
		}

		this.setTitle(cs.getName());

		int imageId = SceneGraph.getImageIdForSection(tid, csid);

		int csImgId = -1;
		if (cs.hasImage()) {
			csImgId = cs.getCoreSectionImage().getId();
		}

		float rotationAngle = SceneGraph.getSectionRotation(tid, csid);
		String label = cs.getName() + "\nTrackId: " + tid + " CoreSectionId:" + csid + " CoreSectionImageId: " + csImgId + " nativeImageID: " + imageId;

		label += "\nLocal: " + SceneGraph.getImageName(imageId);
		label += "\nURL: " + SceneGraph.getImageURL(imageId);
		label += "\nRotation: " + rotationAngle;
		label += "\nDPI: " + SceneGraph.getSectionDPIX(tid, cs.getId());
		label += ", " + SceneGraph.getSectionDPIY(tid, cs.getId());
		label += "\nVisibleTop: " + SceneGraph.getSectionIntervalTop(tid, csid);
		label += "\nVisibleBottom: " + SceneGraph.getSectionIntervalBottom(tid, csid);

		label += "\nParentTrackId: " + SceneGraph.getSectionParentTrackId(tid, csid);
		label += "\nParentSectionId: " + SceneGraph.getSectionParentSectionId(tid, csid);
		label += "\nName: '" + SceneGraph.getSectionName(tid, csid) + "'";

		return label;
	}

	private void onApply() {
		int targetIdx = this.applyTargetOption.getSelectedIndex();

		if (targetIdx != APPLY_TARGET_SECTION) {
			applyToSections();
		} else {
			applyToASection();
		}
	}

	private void onCancel() {
		this.useDPIButton.setSelected(true);
		this.dpix_field.setText(String.valueOf(this.pre_dpix));
		this.dpiy_field.setText(String.valueOf(this.pre_dpiy));
		this.orientationBox.setSelectedIndex(this.pre_orientation);
		this.rotationField.setText(String.valueOf(this.pre_rotation));
		this.intervalTopField.setText(String.valueOf(this.pre_top));
		this.intervalBottomField.setText(String.valueOf(this.pre_bottom));

		onApply();
		dispose();
	}

	private void onChecked() {
		boolean useMeasure = this.useMeasureButton.isSelected();
		boolean useDPI = this.useDPIButton.isSelected();

		dpix_field.setEnabled(useDPI);
		dpiy_field.setEnabled(useDPI);

		lengthField.setEnabled(useMeasure);
		widthField.setEnabled(useMeasure);
	}

	private void onHelp() {
		WikiHelpDialog dialog = new WikiHelpDialog(this, "CRSectionPropertiesDialog");
		dialog.setModal(true);
		dialog.setVisible(true);
	}

	private void onNext() {
		this.sectionIndex++;

		if (this.sectionIndex < this.allSectionIds.length) { // first
			this.sectionId = this.allSectionIds[sectionIndex];

			if (sectionIndex == 0) { // the first
				this.nextButton.setEnabled(true);
				this.previousButton.setEnabled(false);
			} else if (sectionIndex == this.allSectionIds.length - 1) { // last
				this.nextButton.setEnabled(false);
				this.previousButton.setEnabled(true);
			} else {
				this.nextButton.setEnabled(true);
				this.previousButton.setEnabled(true);
			}

			String label = this.generateMetaString(trackId, sectionId);
			setProperties(trackId, sectionId, label);

			// center the section
			CRExperimentController.locateSection(this.trackId, this.sectionId);
		}
	}

	private void onOK() {
		onApply();
		dispose();
	}

	private void onPrevious() {
		this.sectionIndex--;

		if (this.sectionIndex >= 0) {
			this.sectionId = this.allSectionIds[sectionIndex];

			if (sectionIndex == 0) { // the first
				this.nextButton.setEnabled(true);
				this.previousButton.setEnabled(false);
			} else if (sectionIndex == this.allSectionIds.length - 1) {// last
				this.nextButton.setEnabled(false);
				this.previousButton.setEnabled(true);
			} else {
				this.nextButton.setEnabled(true);
				this.previousButton.setEnabled(true);
			}

			String label = this.generateMetaString(trackId, sectionId);
			setProperties(trackId, sectionId, label);

			// center the section
			CRExperimentController.locateSection(this.trackId, this.sectionId);
		}
	}

	public void setMultiProperties(final int trackId, final int[] sectionIds) {
		this.trackId = trackId;
		this.allSectionIds = sectionIds;

		if (sectionIds.length != 0) {
			this.nextButton.setEnabled((sectionIds.length > 1));

			this.sectionIndex = 0;
			this.sectionId = sectionIds[sectionIndex];
		}

		String label = this.generateMetaString(trackId, sectionId);
		setProperties(trackId, sectionId, label);
	}

	public void setProperties(final int trackId, final int sectionId) {
		String label = this.generateMetaString(trackId, sectionId);
		setProperties(trackId, sectionId, label);
	}

	public void setProperties(final int trackId, final int sectionId, final String label) {
		this.trackId = trackId;
		this.sectionId = sectionId;
		this.miscInfoField.setText(label);

		// original section properties
		float topDepth = SceneGraph.getSectionDepth(trackId, sectionId) / 100.0f;
		float rotation = SceneGraph.getSectionRotation(trackId, sectionId);
		boolean orientation = SceneGraph.getSectionOrientation(trackId, sectionId);

		float dpix = SceneGraph.getSectionDPIX(trackId, sectionId);
		float dpiy = SceneGraph.getSectionDPIY(trackId, sectionId);

		// image properties
		int imageId = SceneGraph.getImageIdForSection(trackId, sectionId);
		this.imageHeight = SceneGraph.getImageHeight(imageId);
		this.imageWidth = SceneGraph.getImageWidth(imageId);

		// Interval
		float intervalTop = SceneGraph.getSectionIntervalTop(trackId, sectionId);
		float intervalBottom = SceneGraph.getSectionIntervalBottom(trackId, sectionId);

		// Orientation
		float length, width;
		if (orientation == SceneGraph.PORTRAIT) { // true: portrait
			this.orientationBox.setSelectedIndex(1);

			length = imageHeight / dpix * 2.54f;
			width = imageWidth / dpiy * 2.54f;
		} else { // false: landscape
			this.orientationBox.setSelectedIndex(0);

			length = imageWidth / dpiy * 2.54f;
			width = imageHeight / dpix * 2.54f;
		}

		this.dpix_field.setText("" + dpix);
		this.dpiy_field.setText("" + dpiy);
		this.rotationField.setText("" + rotation);

		this.lengthField.setText("" + length);
		this.widthField.setText("" + width);

		// update slider view
		int maxValue = (int) Math.ceil(length * 10);
		int currentValue = intervalTop == length ? maxValue : (int) (intervalTop * 10);

		this.topSlider.setMinimum(0);
		this.topSlider.setMaximum(maxValue);
		this.topSlider.setValue(currentValue);
		this.intervalTopField.setText(String.valueOf(intervalTop));

		currentValue = (int) intervalBottom * 10;
		this.bottomSlider.setMinimum(0);
		this.bottomSlider.setMaximum(maxValue);
		this.bottomSlider.setValue(currentValue);
		this.intervalBottomField.setText(String.valueOf(intervalBottom));

		// Depth
		this.depthField.setText(String.valueOf(topDepth + intervalTop / 100.0f));

		// Keep a copy of original numbers
		this.pre_dpix = dpix;
		this.pre_dpiy = dpiy;
		this.pre_rotation = rotation;
		this.pre_top = intervalTop;
		this.pre_bottom = intervalBottom;
		this.pre_orientation = orientation ? 1 : 0;

		onApply();
	}
}
