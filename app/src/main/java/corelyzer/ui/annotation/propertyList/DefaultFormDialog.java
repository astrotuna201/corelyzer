/******************************************************************************
 *
 * CoreWall / Corelyzer - An Initial Core Description Tool
 * Copyright (C) 2008 Julian Yu-Chung Chen
 * Electronic Visualization Laboratory, University of Illinois at Chicago
 *
 * This software is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either Version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser Public License along
 * with this software; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * Questions or comments about CoreWall should be directed to
 * cavern@evl.uic.edu
 *
 *****************************************************************************/
package corelyzer.ui.annotation.propertyList;

import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.Hashtable;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import corelyzer.data.ChatGroup;
import corelyzer.data.MarkerType;
import corelyzer.graphics.SceneGraph;
import corelyzer.ui.CorelyzerApp;
import corelyzer.ui.annotation.AbstractAnnotationDialog;
import corelyzer.ui.annotation.AnnotationTypeDirectory;
import corelyzer.util.PropertyListUtility;
import corelyzer.util.TableSorter;

public class DefaultFormDialog extends AbstractAnnotationDialog {
	/**
	 * 
	 */
	private static final long serialVersionUID = -7227819269064213817L;

	public static void main(final String[] args) {
		DefaultFormDialog dialog = new DefaultFormDialog();
		dialog.pack();
		dialog.setVisible(true);
		System.exit(0);
	}

	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JTable propertyValuesTable;

	private JButton deleteButton;

	private DefaultPropertyValuesTableModel model;

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	public DefaultFormDialog() {
		super();

		initTable();
		this.setTitle("Annotation of property-value pairs");

		setContentPane(contentPane);
		setModal(true);
		getRootPane().setDefaultButton(buttonOK);

		buttonOK.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onSave();
			}
		});

		buttonCancel.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		});

		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(final WindowEvent e) {
				onCancel();
			}
		});

		contentPane.registerKeyboardAction(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		deleteButton.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent actionEvent) {
				onDelete();
			}
		});
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
	 * edit this method OR call it in your code!
	 * 
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		buttonOK = new JButton();
		buttonOK.setText("Save");
		panel2.add(buttonOK, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonCancel = new JButton();
		buttonCancel.setText("Cancel");
		panel2.add(buttonCancel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		deleteButton = new JButton();
		deleteButton.setText("Delete");
		panel2.add(deleteButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane
				.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
						| GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		final JScrollPane scrollPane1 = new JScrollPane();
		panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK
				| GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
				false));
		propertyValuesTable = new JTable();
		scrollPane1.setViewportView(propertyValuesTable);
	}

	@Override
	public void collectViewInfo() {
		if (this.attribs == null || model == null) {
			return;
		}

		for (int i = 0; i < model.getRowCount(); i++) {
			String key = (String) model.getValueAt(i, 0);
			String value = (String) model.getValueAt(i, 1);

			attribs.put(key, value);
		}
	}

	private void initTable() {
		this.propertyValuesTable.setShowGrid(true);
		this.propertyValuesTable.setShowHorizontalLines(true);
		this.propertyValuesTable.setShowVerticalLines(true);

		// model
		model = new DefaultPropertyValuesTableModel();
		TableSorter sorter = new TableSorter();
		sorter.setTableModel(model);
		sorter.setTableHeader(this.propertyValuesTable.getTableHeader());
		this.propertyValuesTable.setModel(sorter);

		// header texts
		this.propertyValuesTable.getColumnModel().getColumn(0).setHeaderValue("Property");
		this.propertyValuesTable.getColumnModel().getColumn(1).setHeaderValue("Value");
	}

	private void onCancel() {
		dispose();
	}

	public void onSave() {
		collectViewInfo();

		// Create annotation content and save to an annotation(HTML) file
		SceneGraph.lock();
		{
			// ps. x_pos, y_pos are scenepos in GL context space
			float markerX;
			float markerY;

			if (markerId == -1) {
				markerX = (upperLeftPoint[0] + lowerRightPoint[0]) / 2.0f;
				markerY = (upperLeftPoint[1] + lowerRightPoint[1]) / 2.0f;

				markerId = SceneGraph.createCoreSectionMarker(trackId, sectionId, ChatGroup.DIS, MarkerType.CORE_OUTLINE_MARKER, markerX, -markerY / 2); // fixme
																																							// ChatGroup
																																							// type?

				SceneGraph.setCoreSectionMarkerVertex(trackId, sectionId, markerId, markerX, -markerY / 2, this.upperLeftPoint[0], this.upperLeftPoint[1],
						this.lowerRightPoint[0], this.lowerRightPoint[1]);

			}

			if (markerId != -1) {
				// Summarize information collected and transform them into
				// clast annotations
				File aFile;
				String localFilePath = SceneGraph.getCoreSectionMarkerLocal(trackId, sectionId, markerId);

				// Check if newly add or editing
				if (localFilePath == null || localFilePath.equalsIgnoreCase("")) {

					AnnotationTypeDirectory dir = AnnotationTypeDirectory.getLocalAnnotationTypeDirectory();
					String formName = dir.getFormName(this.getClass().getName());
					aFile = new File(generateFilename(formName));

					SceneGraph.setCoreSectionMarkerLocal(trackId, sectionId, markerId, aFile.getAbsolutePath());
				} else {
					aFile = new File(localFilePath);
				}

				// For DIS Export
				String preState = attribs.get("anno_state");
				if (preState == null || preState.equals("")) {
					attribs.put("anno_state", "added");
				} else if (preState.equalsIgnoreCase("unchanged")) {
					attribs.put("anno_state", "edited");
				}

				attribs.put("anno_app", "CLR");
				attribs.put("anno_class", "CLR_propvalue");
				PropertyListUtility.saveHashtableToProperListFile(attribs, aFile);
			}
		}
		SceneGraph.unlock();

		CorelyzerApp.getApp().updateGLWindows();
		dispose();
	}

	@Override
	public void setAttributes(final Hashtable<String, String> aDict) {
		this.attribs = aDict;

		// Apply to table model
		if (model != null) {
			// For DIS Export
			String annoClass = this.attribs.get("anno_class");
			if (annoClass == null || annoClass.equals("")) {
				this.attribs.put("anno_class", "CLR_propvalue");
			}

			model.setPropertyList(this.attribs);
		}

		syncAttribsToView();
	}

	// (ulx, uly), (lrx, lry) are in physical absolute coordinates
	// This dialog displays points's location relative to the start (upperleft)
	// of this core section

	@Override
	public void setRange(float ulx, float uly, float lrx, float lry) {
		super.setRange(ulx, uly, lrx, lry);

		float scale = SceneGraph.getCanvasDPIX(0) / 2.54f;

		ulx = this.upperLeftPoint[0] / scale;
		uly = this.upperLeftPoint[1] / scale;
		lrx = this.lowerRightPoint[0] / scale;
		lry = this.lowerRightPoint[1] / scale;

		// fill in sampleLocationField in cm
		String locationText = "(" + String.format("%.3f", ulx) + ", " + String.format("%.3f", uly) + ") - (" + String.format("%.3f", lrx) + ", "
				+ String.format("%.3f", lry) + ")";

		this.attribs.put("coordinates", locationText);
		this.attribs.put("starting_depth", String.format("%.3f", ulx));
		this.attribs.put("ending_depth", String.format("%.3f", lrx));
		this.attribs.put("starting_width", String.format("%.3f", uly));
		this.attribs.put("ending_width", String.format("%.3f", lry));

		this.syncAttribsToView();
	}

	public void syncAttribsToView() {
		this.model.setPropertyList(this.attribs);
		this.propertyValuesTable.updateUI();
	}
}
